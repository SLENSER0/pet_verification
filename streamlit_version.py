import clip
import os
import json
import torch
import streamlit as st
import torchvision.transforms as transforms
from PIL import Image
from torchvision.models import resnet50, ResNet50_Weights
from torch.nn.functional import cosine_similarity
from geopy.distance import geodesic
import folium
from streamlit_folium import st_folium
from base64 import b64encode

# === –ù–∞—à–∏ –¥–∞–Ω–Ω—ã–µ ===
DATASET_DIR = "/Users/lolovolkova/Desktop/pet_app_airi/id_pets" # –ø—É—Ç—å –∫ –¥–∞—Ç–∞—Å–µ—Ç—É —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏, –≥–¥–µ –ø–∞–ø–∫–∏ —Å —Ñ–æ—Ç–æ
LOCATIONS_PATH = "/Users/lolovolkova/Desktop/pet_app_airi/animal_locations.json" # –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π
TOP_N = 10

# === –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ===
device = "cuda" if torch.cuda.is_available() else "cpu" # –µ–ª–∏ macos —Å m2 –≤–º–µ—Å—Ç–æ cuda –º–æ–∂–Ω–æ mps  

# === –ú–æ–¥–µ–ª—å –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ ===
@st.cache_resource

# –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ª—é–±—É—é –º–æ–¥–µ–ª—å –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
def load_clip_model():
    model, preprocess = clip.load("ViT-B/32", device=device)
    model.eval()
    return model, preprocess

model_clip, preprocess_clip = load_clip_model()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –≤—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ª—é–±—É—é –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å)
def get_clip_embedding(image: Image.Image):
    image_tensor = preprocess_clip(image.convert("RGB")).unsqueeze(0).to(device)
    with torch.no_grad():
        embedding = model_clip.encode_image(image_tensor)
    return embedding.squeeze(0).cpu()

def get_first_image(animal_id):
    folder = os.path.join(DATASET_DIR, animal_id)
    for file in os.listdir(folder):
        if file.lower().endswith((".jpg", ".jpeg", ".png")):
            return os.path.join(folder, file)
    return None

def image_to_base64(path):
    with open(path, "rb") as img_file:
        return b64encode(img_file.read()).decode()

# === –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ —Å –Ω–∞—à–µ–π –º–æ–¥–µ–ª—å—é (–µ—Å–ª–∏ –º–µ–Ω—è–µ—Ç–µ –º–æ–¥–µ–ª—å, —Å–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—Ç—å –±–∞–∑—É —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏) ===

EMBEDDINGS_CACHE_DIR = "/Users/lolovolkova/Desktop/pet_app_airi/embeddings_cache_clip" # —Ç—É—Ç —É–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å, –≥–¥–µ —Ö—Ä–∞–Ω–∏—Ç—å—Å—è json —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏-–∂–∏–≤–æ—Ç–Ω–æ–≥–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

def load_cached_embeddings(animal_id):
    path = os.path.join(EMBEDDINGS_CACHE_DIR, f"{animal_id}.json")
    if os.path.exists(path):
        with open(path, "r") as f:
            return json.load(f)
    return None

# === –†–∞—Å—á–µ—Ç —Å—Ö–æ–∂–µ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ===

def find_similar_animals(uploaded_images, lat, lon):
    similarity_by_animal = {}

    target_embeddings = [get_clip_embedding(img) for img in uploaded_images]

    for animal_id in os.listdir(DATASET_DIR):
        animal_path = os.path.join(DATASET_DIR, animal_id)
        if not os.path.isdir(animal_path):
            continue

        cached_embeddings = load_cached_embeddings(animal_id)
        if cached_embeddings is None:
            continue

        max_sim = -1
        for _, emb_list in cached_embeddings.items():
            try:
                emb_tensor = torch.tensor(emb_list)
                for user_emb in target_embeddings:
                    sim = cosine_similarity(user_emb.unsqueeze(0), emb_tensor.unsqueeze(0)).item()
                    if sim > max_sim:
                        max_sim = sim
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å {animal_id}: {e}")
                continue

         # === –¢—Ä–µ—à—Ö–æ–ª–¥ —Å—Ö–æ–∂–µ—Å—Ç–∏ - –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—à–µ–π –º–æ–¥–µ–ª–∏ (—ç—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä –º–æ–∂–Ω–æ –∑–∞–¥–∞–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é)===
        if max_sim > 0.73:
            similarity_by_animal[animal_id] = max_sim

    # === –†–∞–±–æ—Ç–∞ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ ===
    with open(LOCATIONS_PATH, "r", encoding="utf-8") as f:
        locations = json.load(f)

    top_animals = sorted(similarity_by_animal.items(), key=lambda x: x[1], reverse=True)[:TOP_N]
    nearby, faraway, others = [], [], []

    for animal_id, sim in top_animals:
        if animal_id in locations:
            coords = locations[animal_id]
            dist = geodesic((lat, lon), (coords["lat"], coords["lon"])).km
            first_img = get_first_image(animal_id)
            info = (animal_id, coords, sim, dist, first_img)
            if dist <= 1.0:
                nearby.append(info)
            else:
                faraway.append(info)

    others_ids = set(similarity_by_animal.keys()) - set([a[0] for a in top_animals])
    for animal_id in others_ids:
        if animal_id in locations:
            coords = locations[animal_id]
            dist = geodesic((lat, lon), (coords["lat"], coords["lon"])).km
            first_img = get_first_image(animal_id)
            others.append((animal_id, coords, similarity_by_animal[animal_id], dist, first_img))

    return nearby, faraway, others

# === Streamlit UI ===
st.set_page_config(
    page_title="–ü–æ–∏—Å–∫ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ", 
    layout="wide",
    page_icon="üêæ"
)

# === –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ –∏–∑ —Å–∞–π—Ç–∞ –ª–µ—Ç–æ AIRI –ø–æ–¥–≤–æ—Ä–æ–≤—ã–≤–∞–µ–º :) ===
st.markdown("""
    <style>
    :root {
        --primary: #2F80ED;
        --secondary: #56CCF2;
        --accent: #F2C94C;
        --dark: #333333;
        --light: #F8F9FA;
        --success: #27AE60;
        --danger: #EB5757;
        --warning: #F2994A;
    }
    
    body {
        font-family: 'Inter', sans-serif;
        color: var(--dark);
        background-color: white;
    }
    
    .stApp {
        background: linear-gradient(180deg, #F8F9FA 0%, #FFFFFF 100%);
    }
    
    .stButton>button {
        background-color: var(--primary);
        color: white;
        border-radius: 8px;
        padding: 8px 16px;
        border: none;
        font-weight: 500;
        transition: all 0.3s;
    }
    
    .stButton>button:hover {
        background-color: #1A6FD9;
        transform: translateY(-1px);
        box-shadow: 0 2px 8px rgba(47, 128, 237, 0.3);
    }
    
    .stFileUploader {
        border: 2px dashed var(--secondary);
        border-radius: 12px;
        padding: 20px;
        background-color: rgba(86, 204, 242, 0.05);
    }
    
    .stMarkdown h1 {
        color: var(--primary);
        font-weight: 700;
        margin-bottom: 1rem;
    }
    
    .stMarkdown h2 {
        color: var(--dark);
        font-weight: 600;
        border-bottom: 2px solid var(--secondary);
        padding-bottom: 0.5rem;
        margin-top: 1.5rem;
    }
    
    .scroll-container {
        max-height: 600px;
        overflow-y: auto;
        padding-right: 10px;
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
        padding: 1rem;
    }
    
    .card {
        background: white;
        border-radius: 12px;
        padding: 1rem;
        margin-bottom: 1rem;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        transition: all 0.3s;
        border-left: 4px solid var(--primary);
    }
    
    .card:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 16px rgba(0, 0, 0, 0.15);
    }
    
    .nearby {
        border-left: 4px solid var(--success) !important;
    }
    
    .faraway {
        border-left: 4px solid var(--warning) !important;
    }
    
    .others {
        border-left: 4px solid var(--secondary) !important;
    }
    
    .map-container {
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        width: 100%;
        height: 400px;
        position: relative;
    }
    
    .stSpinner>div {
        color: var(--primary) !important;
    }
    </style>
""", unsafe_allow_html=True)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–∫–æ–Ω–∫–æ–π –∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
st.markdown("""
    <div style="background: linear-gradient(90deg, #2F80ED 0%, #56CCF2 100%); 
                padding: 2rem; 
                border-radius: 12px; 
                color: white; 
                margin-bottom: 2rem;">
        <h1 style="color: white; margin: 0; display: flex; align-items: center; gap: 1rem;">
            <span style="font-size: 2.5rem;">üîç</span>
            <span>–ü–æ–∏—Å–∫ –ø—Ä–æ–ø–∞–≤—à–µ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –ø–æ —Ñ–æ—Ç–æ</span>
        </h1>
        <p style="opacity: 0.9; margin: 0.5rem 0 0;">–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ —É–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ, –≥–¥–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –≤–∏–¥–µ–ª–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑</p>
    </div>
""", unsafe_allow_html=True)

for key in ["map", "coords", "confirmed_coords", "image", "center_on", "nearby", "faraway", "others", "results", "page"]:
    if key not in st.session_state:
        st.session_state[key] = None if key != "page" else 0

# === –°–µ–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –ø—Ä–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ===
with st.container():
    st.markdown("### üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ")
    st.markdown("<p style='color: #666; margin-top: -1rem;'>–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞</p>", unsafe_allow_html=True)
    
    uploaded_files = st.file_uploader(
        "–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª—ã —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞", 
        type=["jpg", "jpeg", "png"], 
        accept_multiple_files=True,
        label_visibility="collapsed"
    )

if uploaded_files:
    uploaded_files = uploaded_files[:10]
    images = [Image.open(file) for file in uploaded_files]
    st.session_state['image'] = images

    # === –ì–∞–ª–µ—Ä–µ—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ ===
    st.markdown("#### –í–∞—à–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
    cols = st.columns(5)
    for i, img in enumerate(images):
        col = cols[i % 5]
        with col:
            # st.image(img, caption=f"–§–æ—Ç–æ {i+1}", use_column_width=True)
            st.image(img, caption=f"–§–æ—Ç–æ {i+1}", use_container_width=True)

    # === –°–µ–∫—Ü–∏—è –∫–∞—Ä—Ç—ã ===
    st.markdown("### üó∫Ô∏è –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ, –≥–¥–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –≤–∏–¥–µ–ª–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑")
    st.markdown("<p style='color: #666; margin-top: -1rem;'>–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å —Ç–æ—á–∫—É, –∑–∞—Ç–µ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–±–æ—Ä</p>", unsafe_allow_html=True)
    
    default_loc = [55.75, 37.62]
    col_map, col_button = st.columns([4, 1])

    with col_map:
        with st.container():
            pick_map = folium.Map(location=default_loc, zoom_start=12)
            pick_map.add_child(folium.LatLngPopup())
            pick_data = st_folium(pick_map, width=700, height=500)

    with col_button:
        if pick_data and pick_data.get("last_clicked"):
            lat = pick_data["last_clicked"]["lat"]
            lon = pick_data["last_clicked"]["lng"]
            st.session_state['coords'] = (lat, lon)

            if st.button("üìç –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ç–æ—á–∫—É", use_container_width=True):
                st.session_state['confirmed_coords'] = (lat, lon)

                preview_map = folium.Map(location=[lat, lon], zoom_start=13)
                folium.Marker(
                    [lat, lon], 
                    popup="üìç –ú–µ—Å—Ç–æ –ø—Ä–æ–ø–∞–∂–∏", 
                    icon=folium.Icon(color="red", icon="heart", prefix="fa")
                ).add_to(preview_map)

                with open(LOCATIONS_PATH, "r", encoding="utf-8") as f:
                    all_locations = json.load(f)

                for animal_id, coords in all_locations.items():
                    img_path = get_first_image(animal_id)
                    if img_path:
                        try:
                            sim = get_clip_embedding(Image.open(img_path))
                            for user_img in images:
                                user_emb = get_clip_embedding(user_img)
                                s = cosine_similarity(user_emb.unsqueeze(0), sim.unsqueeze(0)).item()
                                if s > 0.6:
                                    encoded = image_to_base64(img_path)
                                    html = f"""
                                    <div style="font-family: Arial, sans-serif;">
                                        <h4 style="color: var(--primary); margin-bottom: 0.5rem;">ID: {animal_id}</h4>
                                        <img src='data:image/jpeg;base64,{encoded}' style='width: 150px; border-radius: 8px;'>
                                        <p style="margin-top: 0.5rem;">–°—Ö–æ–¥—Å—Ç–≤–æ: {s:.2f}</p>
                                    </div>
                                    """
                                    folium.Marker(
                                        location=[coords["lat"], coords["lon"]],
                                        popup=folium.Popup(html, max_width=250),
                                        icon=folium.Icon(color="orange", icon="paw", prefix="fa")
                                    ).add_to(preview_map)
                                    break
                        except:
                            continue

                st.success("‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫.")
            elif st.session_state['confirmed_coords']:
                st.success(f"–í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–æ—á–∫–∞: {st.session_state['confirmed_coords']}")
            

# === –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ ===
if st.session_state['confirmed_coords'] and st.session_state['image']:
    if st.button("üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö", use_container_width=True):
        with st.spinner("üîç –ò–¥—ë—Ç –ø–æ–∏—Å–∫... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ"):
            lat, lon = st.session_state['confirmed_coords']
            images = st.session_state['image']
            nearby, faraway, others = find_similar_animals(images, lat, lon)
            st.session_state.update({"nearby": nearby, "faraway": faraway, "others": others, "center_on": None})
            all_animals = nearby + faraway + others
            st.session_state['results'] = sorted(all_animals, key=lambda x: x[2], reverse=True)

# === –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ===
if st.session_state['results']:
    st.markdown("""
        <div style="background: linear-gradient(90deg, #2F80ED 0%, #56CCF2 100%); 
                    padding: 1rem; 
                    border-radius: 12px; 
                    color: white; 
                    margin-bottom: 1.5rem;">
            <h2 style="color: white; margin: 0;">üó∫Ô∏è –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∂–∏–≤–æ—Ç–Ω—ã–µ</h2>
        </div>
    """, unsafe_allow_html=True)
    
    col1, col2 = st.columns([2, 1])

    with col1:
        # –ö–∞—Ä—Ç–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        st.markdown("### –ö–∞—Ä—Ç–∞ –ø–æ–∏—Å–∫–∞")
        lat, lon = st.session_state['confirmed_coords']
        center = st.session_state.get("center_on")
        updated_map = folium.Map(location=center or [lat, lon], zoom_start=15 if center else 13)
        updated_map.add_child(folium.LatLngPopup())

        # –ì—Ä—É–ø–ø—ã –∂–∏–≤–æ—Ç–Ω—ã—Ö —Å —Ä–∞–∑–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
        groups = [
            (st.session_state['nearby'], "green", "home", "–†—è–¥–æ–º (–¥–æ 1 –∫–º)"),
            (st.session_state['faraway'], "orange", "map-marker-alt", "–ù–µ–¥–∞–ª–µ–∫–æ (–±–æ–ª–µ–µ 1 –∫–º)"),
            (st.session_state['others'], "blue", "search", "–î—Ä—É–≥–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è")
        ]

        for group, color, icon, label in groups:
            for aid, coords, sim, dist, img_path in group:
                if img_path:
                    encoded = image_to_base64(img_path)
                    html = f"""
                    <div style="font-family: Arial, sans-serif;">
                        <h4 style="color: var(--primary); margin-bottom: 0.5rem;">ID: {aid}</h4>
                        <img src='data:image/jpeg;base64,{encoded}' style='width: 150px; border-radius: 8px;'>
                        <p style="margin-top: 0.5rem;"><b>–°—Ö–æ–¥—Å—Ç–≤–æ:</b> {sim:.2f}</p>
                        <p><b>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:</b> {dist:.2f} –∫–º</p>
                    </div>
                    """
                    folium.Marker(
                        location=[coords["lat"], coords["lon"]],
                        popup=folium.Popup(html, max_width=250),
                        icon=folium.Icon(color=color, icon=icon, prefix="fa")
                    ).add_to(updated_map)

        # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ - –º–µ—Å—Ç–æ –ø—Ä–æ–ø–∞–∂–∏
        folium.Marker(
            location=[lat, lon],
            popup="üìç –ú–µ—Å—Ç–æ –ø—Ä–æ–ø–∞–∂–∏",
            icon=folium.Icon(color="red", icon="heart", prefix="fa")
        ).add_to(updated_map)

        # –û–±–ª–∞—Å—Ç—å –∫–∞—Ä—Ç—ã —Å —Ç–µ–Ω—å—é
        st.markdown('<div class="map-container">', unsafe_allow_html=True)
        st_folium(updated_map, width=600, height=500)
        st.markdown('</div>', unsafe_allow_html=True)

    with col2:
        # –°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –∂–∏–≤–æ—Ç–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ —Ç–æ–ø-10 - –º–æ–∂–Ω–æ –≤ –Ω–∞—á–∞–ª–µ –ø–æ–º–µ–Ω—è—Ç—å —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä, –Ω–æ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ –∫–∞—Ä—Ç—ã —É –Ω–∞—Å —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è —á–∏—Å–ª–æ - —Ç—É—Ç —á—Ç–æ–±—ã —Å–∞–π—Ç –Ω–µ –ø–æ–¥–≤–∏—Å–∞–ª –ø–æ–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–µ–±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ)
        st.markdown("### üìã –¢–æ–ø-10 –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ—Ö–æ–∂–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö")
        st.markdown('<div class="scroll-container">', unsafe_allow_html=True)

        def display_card(aid, coords, sim, dist, img_path, group):
            group_class = {
                "nearby": "nearby",
                "faraway": "faraway",
                "others": "others"
            }.get(group, "")
            
            st.markdown(f"""
                <div class="card {group_class}">
                    <img src="data:image/jpeg;base64,{image_to_base64(img_path)}" 
                        style="width: 100px; height: auto; border-radius: 6px; margin-bottom: 0.3rem;">
                    <p><b>ID:</b> {aid}</p>
                    <p><b>–°—Ö–æ–¥—Å—Ç–≤–æ:</b> {sim:.2f}</p>
                    <p><b>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:</b> {dist:.2f} –∫–º</p>
                    <button onclick="window.streamlitScriptHost.requestCustomMessage('center_on', '{aid}')" 
                            style="background: var(--primary); color: white; border: none; border-radius: 6px; padding: 6px 12px; cursor: pointer; width: 100%;">
                        üìç –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ
                    </button>
                </div>
            """, unsafe_allow_html=True)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ö–æ–¥—Å—Ç–≤—É
        all_results = []
        if st.session_state['nearby']:
            all_results.extend([(*animal, "nearby") for animal in st.session_state['nearby']])
        if st.session_state['faraway']:
            all_results.extend([(*animal, "faraway") for animal in st.session_state['faraway']])
        if st.session_state['others']:
            all_results.extend([(*animal, "others") for animal in st.session_state['others']])
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ö–æ–¥—Å—Ç–≤—É (cosine simularity) –∏ –±–µ—Ä–µ–º —Ç–æ–ø-10
        top_10 = sorted(all_results, key=lambda x: x[2], reverse=True)[:10]

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-10
        for animal in top_10:
            display_card(*animal)

        st.markdown('</div>', unsafe_allow_html=True)

# –§—É—Ç–µ—Ä
st.markdown("""
    <div style="margin-top: 3rem; padding: 1.5rem; text-align: center; color: #666; border-top: 1px solid #eee;">
        <p>–°–µ—Ä–≤–∏—Å –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–ø–∞–≤—à–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö ‚Ä¢ AIRI Pet Finder</p>
        <p style="font-size: 0.9rem;">–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö</p>
    </div>
""", unsafe_allow_html=True)
